/*
 * Copyright (C) 2014 Leo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package tw.edu.sju.ee.eea.module.iepe.project.window;

import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.io.IOException;
import java.util.List;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.text.DefaultEditorKit;
import org.netbeans.spi.navigator.NavigatorPanel;
import org.openide.actions.NewAction;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.NodeTransfer;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.actions.SystemAction;
import org.openide.util.datatransfer.PasteType;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@Messages({
    "CTL_NavigatorAction=Navigator",
    "CTL_NavigatorTopComponent=Navigator Window",
    "HINT_NavigatorTopComponent=This is a Navigator window"
})
public final class IepeNavigatorPanel extends JPanel implements NavigatorPanel, ExplorerManager.Provider {

    private ExplorerManager manager;
    private BeanTreeView listView;
    private Lookup lookup;
    private Action copyAction;

    public IepeNavigatorPanel() {

        setLayout(new BorderLayout());
        manager = new ExplorerManager();
        manager.setRootContext(new RootNode(new CategoryChildren()));
        ActionMap map = getActionMap();
        copyAction = ExplorerUtils.actionCopy(manager);
        map.put(DefaultEditorKit.copyAction, copyAction);
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(manager));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(manager));
        map.put("delete", ExplorerUtils.actionDelete(manager, true)); // or false

        lookup = ExplorerUtils.createLookup(manager, map);

        listView = new BeanTreeView();
        add(listView);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public String getDisplayName() {
        return "List view panel";
    }

    public String getDisplayHint() {
        return "List view based navigator panel";
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void panelActivated(Lookup lkp) {
        ExplorerUtils.activateActions(manager, true);
    }

    @Override
    public void panelDeactivated() {
        ExplorerUtils.activateActions(manager, false);
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public class RootNode extends AbstractNode {

        /**
         * Creates a new instance of RootNode
         */
        public RootNode(Children children) {
            super(children);
        }

        @Override
        public Image getIcon(int type) {
            return ImageUtilities.loadImage("tw/edu/sju/ee/eea/module/iepe/project/iepe_project.png");
        }

        @Override
        public Image getOpenedIcon(int type) {
            return getIcon(type);
        }

        @Override
        public String getDisplayName() {
            return "Real-time::ipt";
        }

    }

    public class Category {

        private String name;

        /**
         * Creates a new instance of Category
         */
        public Category() {
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

    }

    public class CategoryChildren extends Children.Keys {

        private String[] Categories = new String[]{
            "channel-01",
            "channel-02",
            "channel-03",
            "channel-04",
            "channel-05",
            "channel-06",};

        public CategoryChildren() {
        }

        protected Node[] createNodes(Object key) {
            Category obj = (Category) key;
            return new Node[]{new MovieNode(obj)};
        }

        protected void addNotify() {
            super.addNotify();
            Category[] objs = new Category[Categories.length];
            for (int i = 0; i < objs.length; i++) {
                Category cat = new Category();
                cat.setName(Categories[i]);
                objs[i] = cat;
            }
            setKeys(objs);
        }

    }

    public class MovieNode extends AbstractNode {

        private Category cccc;

        /**
         * Creates a new instance of InstrumentNode
         */
        public MovieNode(Category key) {
            super(Children.LEAF, Lookups.fixed(new Object[]{key}));
            this.cccc = key;
            setDisplayName(key.getName());
            setIconBaseWithExtension("org/netbeans/myfirstexplorer/marilyn.gif");
        }

        public boolean canCut() {

            return true;
        }

        public boolean canDestroy() {
            return true;
        }

        public Action[] getActions(boolean popup) {
            return new Action[]{};
        }

    }
}
